
package org.usfirst.frc.team649.robot.commands;

import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc.team649.robot.Robot;

/**
 *
 */
public class Drive extends Command {
	double distance;
	double tolerance = 0.05;
	
    public Drive(double distance) {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
    	
    	this.distance = distance;
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.table);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    
    public Drive(double distance, double tolerance) {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
    	
    	this.distance = distance;
    	this.tolerance = tolerance;
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.table);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	double setpoint = Robot.table.getPosition() + distance;
    	Robot.table.setSetpoint(setpoint);
    	Robot.table.enable();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	double position = Robot.table.getPosition();
    	double setpoint = Robot.table.getSetpoint();
    	double error = Math.abs(setpoint - position);
    	
    	if (Robot.debug) {
    		SmartDashboard.putNumber("Setpoint", setpoint);
    		SmartDashboard.putNumber("Position", position);
    		SmartDashboard.putNumber("Error", error);
    	}
    	
        return error < tolerance;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.table.disable();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
